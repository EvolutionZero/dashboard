minio:
  url: http://192.168.3.140:9000
  username: admin
  password: admin123
dashboard:
  url: 192.168.3.130:8877
spring:
  datasource:
    driver-class-name: org.postgresql.Driver
    url: 'jdbc:postgresql://192.168.3.110:5432/postgres?currentSchema=eagle-eye'
    username: postgres
    password: 123456
    hikari:
      # 最小空闲连接数量
      minimum-idle: 5
      # 空闲连接存活最大时间，默认600000（10分钟）
      idle-timeout: 180000
      # 连接池最大连接数，默认是10
      maximum-pool-size: 10
      # 此属性控制从池返回的连接的默认自动提交行为,默认值：true
      auto-commit: true
      # 连接池名称
      pool-name: MyHikariCP
      # 此属性控制池中连接的最长生命周期，值0表示无限生命周期，默认1800000即30分钟
      max-lifetime: 600000
      # 数据库连接超时时间,默认30秒，即30000
      connection-timeout: 30000
      connection-test-query: SELECT 1
      validation-timeout: 30000
  kafka:
    # 集群地址
    bootstrap-servers: 192.168.3.150:9091,192.168.3.150:9092,192.168.3.150:9093
    listener:
      #设置是否批量消费，默认 single（单条），batch（批量）
      type: single
      ##设置消费者组中的线程数量
      concurrency: 1
    # 消费者配置
    consumer:
      # 默认消费者组
      group-id: testGroup
      group-instance-id: aaaa
      # 自动提交 offset 默认 true
      enable-auto-commit: false
      # 自动提交的频率 单位 ms
      auto-commit-interval: 1001
      # 批量消费最大数量
      max-poll-records: 101
      # Key 反序列化类
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      # Value 反序列化类
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      # 当kafka中没有初始offset或offset超出范围时将自动重置offset
      # earliest:重置为分区中最小的offset
      # latest:重置为分区中最新的offset(消费分区中新产生的数据)
      # none:只要有一个分区不存在已提交的offset,就抛出异常
      auto-offset-reset: latest
      properties:
        interceptor:
          classes: com.zero.dashboard.interceptor.MyConsumerInterceptor
        session:
          timeout:
            # session超时，超过这个时间consumer没有发送心跳,就会触发rebalance操作
            ms: 120000
        request:
          timeout:
            # 请求超时
            ms: 120000